{"ast":null,"code":"import _classCallCheck from \"/Users/rebecca/Desktop/art2/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/rebecca/Desktop/art2/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/rebecca/Desktop/art2/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/rebecca/Desktop/art2/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/rebecca/Desktop/art2/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/rebecca/Desktop/art2/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/rebecca/Desktop/art2/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.textChangeHandler = function (e) {\n      var text = e.target.value;\n\n      _this.setState({\n        text: text\n      }); //reconstruct the libary of words\n\n\n      var words = [];\n      var word = '';\n\n      for (var i = 0; i < text.length; i++) {\n        var ch = text.charAt(i);\n        var nextCh = text.charAt(i + 1);\n\n        if (ch !== ' ') {\n          word += ch;\n        } else if (ch === ' ' && nextCh !== ' ') {\n          words.push(word);\n          word = '';\n        }\n      }\n\n      _this.setState({\n        words: words\n      });\n\n      console.log(_this.state.text); //find the new corresponding colors\n    };\n\n    _this.state = {\n      text: '',\n      words: [],\n      colorLib: [//{word: '', color:`rgb()`}\n      {\n        word: 'red',\n        color: \"rgb(255, 0, 0, 1)\"\n      }, {\n        word: 'yellow',\n        color: \"rgb(255, 255, 0, 1)\"\n      }, {\n        word: 'blue',\n        color: \"rgb(0, 0, 255, 1)\"\n      }, {\n        word: 'green',\n        color: \"rgb(0, 255, 0, 1)\"\n      }, {\n        word: 'purple',\n        color: \"rgb(255, 0, 255, 1)\"\n      }]\n    };\n    _this.textChangeHandler = _this.textChangeHandler.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n\n    /*\n    findColors = (word) => {\n      displayedColors = [];\n    }\n    */\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"canvas\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        className: \"canvas-label\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, \"Start typing and see what happens...\")), React.createElement(\"textarea\", {\n        type: \"text\",\n        name: \"txt\",\n        className: \"canvas-input\",\n        value: this.state.text,\n        onChange: this.textChangeHandler,\n        placeholder: \"\",\n        rows: \"5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        className: \"word-count\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, \"Word Count: \", this.state.text.length)));\n    }\n  }]);\n\n  return App;\n}(Component);\n/*{this.state.colors.map((color,key) => {\n  return <div key={key} style={color}></div>\n})}\n*/\n\n\nexport default App;","map":{"version":3,"sources":["/Users/rebecca/Desktop/art2/src/App.js"],"names":["React","Component","App","props","textChangeHandler","e","text","target","value","setState","words","word","i","length","ch","charAt","nextCh","push","console","log","state","colorLib","color","bind"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      text: '',\n      words: [],\n      colorLib: [\n        //{word: '', color:`rgb()`}\n        {word: 'red', color:`rgb(255, 0, 0, 1)`},\n        {word: 'yellow', color:`rgb(255, 255, 0, 1)`},\n        {word: 'blue', color:`rgb(0, 0, 255, 1)`},\n        {word: 'green', color:`rgb(0, 255, 0, 1)`},\n        {word: 'purple', color:`rgb(255, 0, 255, 1)`}\n      ]\n    };\n    this.textChangeHandler = this.textChangeHandler.bind(this);\n  }\n\n  textChangeHandler= (e) => {\n    var text = e.target.value;\n    this.setState({text: text});\n    //reconstruct the libary of words\n    var words = [];\n    var word = '';\n    for (var i = 0; i < text.length; i++) {\n      var ch = text.charAt(i);\n      var nextCh = text.charAt(i + 1);\n      if (ch !== ' ') {\n        word += ch;\n      } else if (ch === ' ' && nextCh !== ' ') {\n        words.push(word);\n        word = '';\n      }\n    }\n      this.setState({words: words});\n      console.log(this.state.text);\n      //find the new corresponding colors\n  }\n\n  /*\n  findColors = (word) => {\n    displayedColors = [];\n  }\n  */\n\n  render(){\n      return (\n        <div className='canvas'>\n          <div><label className='canvas-label'>Start typing and see what happens...</label></div>\n          <textarea type='text'name='txt' className='canvas-input' value={this.state.text}\n          onChange={this.textChangeHandler} placeholder='' rows='5'/>\n          <div><label className='word-count'>Word Count: {this.state.text.length}</label></div>\n        </div>\n      );\n    }\n}\n\n/*{this.state.colors.map((color,key) => {\n  return <div key={key} style={color}></div>\n})}\n*/\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}