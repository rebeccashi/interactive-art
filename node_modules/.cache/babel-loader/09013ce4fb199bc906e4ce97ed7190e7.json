{"ast":null,"code":"import _classCallCheck from \"/Users/rebecca/Desktop/art2/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/rebecca/Desktop/art2/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/rebecca/Desktop/art2/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/rebecca/Desktop/art2/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/rebecca/Desktop/art2/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/rebecca/Desktop/art2/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/rebecca/Desktop/art2/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Canvas from './Canvas.js';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.textChangeHandler = function (e) {\n      var text = e.target.value;\n\n      _this.setState({\n        text: text\n      }); //reconstruct the libary of words\n\n\n      var words = [];\n      var word = '';\n\n      for (var i = 0; i < text.length; i++) {\n        var ch = text.charAt(i);\n        var nextCh = text.charAt(i + 1);\n\n        if (ch !== ' ') {\n          word += ch;\n        } else if (ch === ' ' && nextCh !== ' ') {\n          words.push(word);\n          word = '';\n        }\n      } //bug: continuous spaces produce a period for some reason\n\n\n      _this.setState({\n        words: words\n      }); //find the new corresponding colors\n\n\n      findColors();\n    };\n\n    _this.findColors = function (word) {\n      var displayedColors = [];\n      var colorLib = _this.state.colorLib;\n      var found = false; //go through the words array, push the corresponding color to each word to displayedColors\n      //map function\n\n      words.map(function (word, index) {\n        for (var i = 0; i < colorLib.length && !found; i++) {\n          if (word === colorLib[i].word) {\n            found = true;\n            var color = \"rgb(\".concat(colorLib[i].r, \", \").concat(colorLib[i].g, \", \").concat(colorlib[i].b, \", \");\n\n            if (colorLib[i].t === 1) {\n              color += \"1)\";\n            } else {\n              color += \"\".concat(_this.state.opacities, \")\");\n            }\n\n            displayedColors.push(color);\n          }\n        }\n      });\n    };\n\n    _this.state = {\n      text: '',\n      words: [],\n      colorLib: [//{word: '', r: , g: , b: , t: }\n      {\n        word: 'red',\n        r: 255,\n        g: 0,\n        b: 0,\n        o: 1\n      }, {\n        word: 'yellow',\n        r: 255,\n        g: 255,\n        b: 0,\n        o: 1\n      }, {\n        word: 'blue',\n        r: 0,\n        g: 0,\n        b: 0,\n        o: 1\n      }, {\n        word: 'green',\n        r: 0,\n        g: 255,\n        b: 0,\n        o: 1\n      }, {\n        word: 'purple',\n        r: 255,\n        g: 0,\n        b: 255,\n        o: 1\n      }],\n      displayedColors: [],\n      tops: [],\n      lefts: [],\n      opacities: []\n    };\n    _this.textChangeHandler = _this.textChangeHandler.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var colors = null;\n      colors = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, this.state.displayedColors.map(function (color, index) {\n        return React.createElement(Canvas, {\n          color: color,\n          top: _this2.state.tops[index],\n          left: _this2.state.lefts[index],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 76\n          },\n          __self: this\n        });\n      }));\n      return React.createElement(\"div\", {\n        className: \"canvas\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        className: \"canvas-label\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, \"Start typing and see what happens...\")), React.createElement(\"textarea\", {\n        type: \"text\",\n        name: \"txt\",\n        className: \"canvas-input\",\n        value: this.state.text,\n        onChange: this.textChangeHandler,\n        placeholder: \"\",\n        rows: \"5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        className: \"word-count\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, \"Word Count: \", this.state.words.length)), colors);\n    }\n  }]);\n\n  return App;\n}(Component);\n/*{this.state.colors.map((color,key) => {\n  return <div key={key} style={color}></div>\n})}\n*/\n\n\nexport default App;","map":{"version":3,"sources":["/Users/rebecca/Desktop/art2/src/App.js"],"names":["React","Component","Canvas","App","props","textChangeHandler","e","text","target","value","setState","words","word","i","length","ch","charAt","nextCh","push","findColors","displayedColors","colorLib","state","found","map","index","color","r","g","colorlib","b","t","opacities","o","tops","lefts","bind","colors"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport Canvas from './Canvas.js'\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      text: '',\n      words: [],\n      colorLib: [\n        //{word: '', r: , g: , b: , t: }\n        {word: 'red', r: 255, g: 0, b: 0, o: 1},\n        {word: 'yellow', r: 255, g: 255, b: 0, o: 1},\n        {word: 'blue', r: 0, g: 0, b: 0, o: 1},\n        {word: 'green', r: 0, g: 255, b: 0, o: 1},\n        {word: 'purple', r: 255, g: 0, b: 255, o: 1}\n      ],\n      displayedColors: [],\n      tops: [],\n      lefts: [],\n      opacities: []\n    };\n    this.textChangeHandler = this.textChangeHandler.bind(this);\n  }\n\n  textChangeHandler = (e) => {\n    var text = e.target.value;\n    this.setState({text: text});\n    //reconstruct the libary of words\n    var words = [];\n    var word = '';\n    for (var i = 0; i < text.length; i++) {\n      var ch = text.charAt(i);\n      var nextCh = text.charAt(i + 1);\n      if (ch !== ' ') {\n        word += ch;\n      } else if (ch === ' ' && nextCh !== ' ') {\n        words.push(word);\n        word = '';\n      }\n    }\n    //bug: continuous spaces produce a period for some reason\n    this.setState({words: words});\n    //find the new corresponding colors\n    findColors();\n  }\n\n  findColors = (word) => {\n    let displayedColors = [];\n    const colorLib = this.state.colorLib;\n    let found = false;\n    //go through the words array, push the corresponding color to each word to displayedColors\n    //map function\n    words.map((word, index) => {\n      for (var i = 0; i < colorLib.length && !found; i++) {\n        if (word === colorLib[i].word) {\n          found = true;\n          let color =  `rgb(${colorLib[i].r}, ${colorLib[i].g}, ${colorlib[i].b}, `;\n          if (colorLib[i].t === 1) {\n            color += \"1)\"\n          } else {\n            color += `${this.state.opacities})`\n          }\n          displayedColors.push(color);\n        }\n      }\n    });\n  }\n\n  render(){\n    let colors = null;\n    colors = (\n      <div>\n        {this.state.displayedColors.map((color, index) => {\n          return <Canvas\n            color = {color}\n            top = {this.state.tops[index]}\n            left = {this.state.lefts[index]} />\n        })}\n      </div>\n    );\n\n    return (\n      <div className = \"canvas\">\n        <div><label className='canvas-label'>Start typing and see what happens...</label></div>\n        <textarea type='text'name='txt' className='canvas-input' value={this.state.text}\n        onChange={this.textChangeHandler} placeholder='' rows='5'/>\n        <div><label className='word-count'>Word Count: {this.state.words.length}</label></div>\n        {colors}\n      </div>\n    );\n  }\n}\n\n/*{this.state.colors.map((color,key) => {\n  return <div key={key} style={color}></div>\n})}\n*/\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}